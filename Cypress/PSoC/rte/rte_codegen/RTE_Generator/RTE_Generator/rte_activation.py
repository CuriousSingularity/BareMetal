##############################################################################
# rte_objects.py
#
# Description:   Create RTE signal objects
# Author:        Peter Fromm
#
# Input:         XML stream
# Output:        signal objects
from fileinput import filename


    ########################################################################
    ## Public method for the h file creation
    ########################################################################  
    
    
    
    
    
def _create_h_file_header(root, fout_h):
    
    rline = "/**************************************************\n"
    fout_h.write(rline)
    
    rline = " ** The RTE activation engine (autogenerated)\n"
    fout_h.write(rline)
  
    rline = " **************************************************/\n\n"
    fout_h.write(rline)
    
    filename = "RTE_ACTIVATION"
    rline = "#ifndef " + filename + "_H\n"
    fout_h.write(rline)
    
    rline = "#define " + filename + "_H\n\n"
    fout_h.write(rline)

    rline = "#include \"project.h\"\n"
    fout_h.write(rline)

    rline = "#include \"global.h\"\n"
    fout_h.write(rline)

    rline = "#include \"rte.h\"\n"
    fout_h.write(rline)

    


    fout_h.write("\n\n")

    ########################################################################
    ## Public method for the h file creation
    ########################################################################  
    
    
def _create_activation_h_file(root, config):
    
    #open filename
    filename_h = config["path_out"] + "\\" + "rte_activation.h"
    fout_h=open(filename_h, 'w')

    #Create file header with includes
    _create_h_file_header(root, fout_h)
    
    #create public functions
    rline = "/** \n"
    fout_h.write(rline)
    rline = " ** Cyclic Activation Table\n"
    fout_h.write(rline)
    rline = " **/ \n"
    fout_h.write(rline)
    rline = " extern const RTE_cyclicTable_t RTE_cyclicActivationTable[]; \n"
    fout_h.write(rline)
    rline = " extern const uint16_t RTE_cyclicActivation_size; \n\n"
    fout_h.write(rline)

    
    rline = "/** \n"
    fout_h.write(rline)
    rline = " ** Event Activation Table\n"
    fout_h.write(rline)
    rline = " **/ \n"
    fout_h.write(rline)
    rline = " extern const RTE_eventTable_t RTE_eventActivationTable[]; \n"
    fout_h.write(rline)
    rline = " extern const uint16_t RTE_eventActivation_size; \n\n"
    fout_h.write(rline)


    rline = "\n\n#endif\n"
    fout_h.write(rline)

    fout_h.close()


########################################################################
## Private methods for the c file creation
########################################################################        
def _create_c_file_header(root, config, fout_c):

    rline = "/**************************************************\n"
    fout_c.write(rline)
    
    rline = " ** The signal blackboard (autogenerated)\n"
    fout_c.write(rline)
  
    rline = " **************************************************/\n\n"
    fout_c.write(rline)
    
    rline = "#include \"project.h\"\n"
    fout_c.write(rline)

    rline = "#include \"global.h\"\n"
    fout_c.write(rline)

    rline = "#include \"rte.h\"\n"
    fout_c.write(rline)
    
    rline = "#include \"rte_activation.h\" \n\n"
    fout_c.write(rline)
    
    rline = "\n/* Software components */\n"
    fout_c.write(rline)

    swc = { }
    for runnable in root.iter("runnable"):
        swc[runnable.get("component").lower()] = runnable.get("component").lower()
    
    for runnable in swc:
        rline = "#include \"" + runnable.lower() + ".h\"\n"
        fout_c.write(rline)

    fout_c.write("\n\n")

    
    
def _create_c_cyclic_entries(root, config, fout_c):
    rline = "/* Cyclic Table */\n\n"
    fout_c.write(rline)
    
    rline = "const RTE_cyclicTable_t RTE_cyclicActivationTable[] = { \n"
    fout_c.write(rline)
    
    for cyclic in root.iter('cyclic'):
        runnables = cyclic.getchildren();
        
        for runnable in runnables:
            name = runnable.get("name");
            cycleTime = runnable.get("cycletime");
            rline = "   { " + name + ", " + cycleTime + " },\n"
            fout_c.write(rline)

    rline = "}; \n\n"
    fout_c.write(rline)

    
    rline = " const uint16_t RTE_cyclicActivation_size = sizeof (RTE_cyclicActivationTable) / sizeof(RTE_cyclicTable_t); \n\n"
    fout_c.write(rline)
    

def _create_c_event_entries(root, config, fout_c):
    rline = "/* Event Table */\n\n"
    fout_c.write(rline)
  
    rline = "const RTE_eventTable_t RTE_eventActivationTable[] = { \n"
    fout_c.write(rline)
    
    for event in root.iter('event'):
        runnables = event.getchildren();
        
        for runnable in runnables:
            name = runnable.get("name");
            event = runnable.get("event");
            rline = "   { " + name + ", " + event + " },\n"
            fout_c.write(rline)

    rline = "}; \n\n"
    fout_c.write(rline)

    
    rline = " const uint16_t RTE_eventActivation_size = sizeof (RTE_eventActivationTable) / sizeof(RTE_eventTable_t); \n\n"
    fout_c.write(rline)

def _create_activation_c_file(root, config):
    
    print("   Writing Source File...")
    
    #open filename
    filename_c = config["path_out"] + "\\" + "rte_activation.c"
    fout_c=open(filename_c, 'w')
    
    
    #Create file header with includes
    _create_c_file_header(root, config, fout_c)
    
    #Create cyclic table
    _create_c_cyclic_entries(root, config, fout_c)

    #Create event table
    _create_c_event_entries(root, config, fout_c)

    fout_c.close()
    
################################
## create
## In: root of the xml data structure
def create(root, config):
    
      
    ##create the files        
    _create_activation_h_file(root, config)
    ##create_c_file()
    _create_activation_c_file(root, config)
      

## create
################################   